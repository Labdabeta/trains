%%{
	machine train_cmd;
	write data;
}%%

static inline int parse_cmd(char *cmd, struct A0_model_message *msg)
{
	int cs;
	char *p = cmd;
	char *pe;
	for (pe = p; *pe; ++pe);
	char *eof = pe;
	int num1, num2;
	num1 = num2 = 0;
	msg->code = CODE_Command;

	%%{
		action first_num { num1 *= 10; num1 += fc - '0'; }
		action second_num { num2 *= 10; num2 += fc - '0'; }
		first = ([0-9]+ $first_num);
		second = ([0-9]+ $second_num);
		second_chr = ([CcSs] ${num2 = fc;});
		action process_tr {
			msg->command.type = A0TYPE_SetSpeed;
			msg->command.args.speed.train = num1;
			msg->command.args.speed.speed = num2;
		}
		action process_rv {
			msg->command.type = A0TYPE_Reverse;
			msg->command.args.reverse.train = num1;
		}
		action process_sw {
			msg->command.type = A0TYPE_SwitchFlip;
			msg->command.args.flip.number = num1;
			msg->command.args.flip.state = (num2 > 'Z' ? num2 - ('a' - 'A') : num2);
		}
		action process_q {
			msg->command.type = A0TYPE_Quit;
		}
		action process_l {
			msg->command.type = A0TYPE_Headlights;
			msg->command.args.lights.train = num1;
		}
		tr_cmd = ' '* [Tt][Rr] ' '+ first ' '+ second %process_tr;
		rv_cmd = ' '* [Rr][Vv] ' '+ first %process_rv;
		sw_cmd = ' '* [Ss][Ww] ' '+ first ' '+ second_chr %process_sw;
		q_cmd = ' '* [Qq] %process_q;
		l_cmd = ' '* [Ll] ' '+ first %process_l;
		main := (tr_cmd | rv_cmd | sw_cmd | q_cmd | l_cmd) $err{dprintf("Error on symbol: %c\n\r", *p); return 0;};
		write init;
		write exec;
	}%%

	return 1;
}
